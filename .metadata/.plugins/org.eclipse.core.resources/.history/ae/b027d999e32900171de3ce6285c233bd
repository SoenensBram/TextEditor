package Editor;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * Simple GUI for a text editor.
 *
 */
public class Texted extends JFrame implements DocumentListener {
	private JTextArea textArea;
	private StackLL<String> Log;
	private String LogWord;
	private int previos;
	
	private static final long serialVersionUID = 5514566716849599754L;
	/**
	 * Constructs a new GUI: A TextArea on a ScrollPane
	 */
	public Texted() {
		super();
		setTitle("Html Editor");
		setBounds(800, 800, 600, 600);
		textArea = new JTextArea(30, 80);
		textArea.setLineWrap(true);
		textArea.setWrapStyleWord(true);
		
		//Registration of the callback
		textArea.getDocument().addDocumentListener(this);
		
		JScrollPane scrollPane = new JScrollPane(textArea);
		add(scrollPane);
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		previos = 0;
		Log = new StackLL<String>(10);
		LogWord = "";
	}

	/**
	 * Callback when changing an element
	 */
	public void changedUpdate(DocumentEvent ev) {
		this.addToLog(ev.toString(), 1);
	}

	/**
	 * Callback when deleting an element
	 */
	public void removeUpdate(DocumentEvent ev) {
		this.addToLog(ev.toString(), 2);
	}

	/**
	 * Callback when inserting an element
	 */
	public void insertUpdate(DocumentEvent ev) {
		//Check if the change is only a single character, otherwise return so it does not go in an infinite loop
		if(ev.getLength() != 1) return;
		
		this.addToLog(ev.toString(), 3);
		
		// In the callback you cannot change UI elements, you need to start a new Runnable
		SwingUtilities.invokeLater(new Task("foo"));
	}

	/**
	 * this adds a change to the log
	 * @param woord
	 * @param calling
	 * TODO lokatie van de verandering
	 */
	private void addToLog(String woord,int calling){
		if(LogWord.length()>0){
			if(previos == 0){
				LogWord = "";
			}else{
				if(calling != previos){
					Log.push(LogWord);
					LogWord="";
				}
			}
			if(LogWord.length() >= 10){
				Log.push(LogWord);
				LogWord="";
			}else{
				LogWord.concat(woord);
			}
			previos = calling;
		}
		
	}
	
	/**
	 * This Methode Checks if all the tags are closed.
	 */
	private void tagControle(){
		String tags = textArea.getText();
		Log.push(tags);
		int OpeningTagLocation = 0;
		String result = "";
		if(tags.contains("<")){
			OpeningTagLocation = tags.indexOf("<", OpeningTagLocation);
			if(tags.contains(">")){
				int i = 0;
				while(i != tags.length()){
					i = tags.indexOf("<", i);
					if(tags.indexOf("<", i)<tags.indexOf(">", i)){
						String[] tekst = tags.split("<", 2);
						result.concat(tekst[0]);
						result.concat("< Tag Not Closed");
						result.concat(tekst[1]);
					}
					if(i==-1){
						i = tags.length();
					}
					textArea.setText(result);
				}
			}else{
				String[] tekst = tags.split("<");
				for(int i = 0 ; i < tekst.length ; i++){
					result.concat(tekst[i]);
					result.concat("< Tag Not Closed");
				}
				textArea.setText(result);
			}
		}
	}
	
	
	/**
	 * Runnable: change UI elements as a result of a callback
	 * Start a new Task by invoking it through SwingUtilities.invokeLater
	 */
	private class Task implements Runnable {
		private String text;
		
		/**
		 * Pass parameters in the Runnable constructor to pass data from the callback 
		 * @param text which will be appended with every character
		 */
		Task(String text) {
			this.text = text;
		}

		/**
		 * The entry point of the runnable
		 */
		public void run() {
			textArea.append(text);
		}
	}

	/**
	 * Entry point of the application: starts a GUI
	 */
	public static void main(String[] args) {
		new Texted();

	}

}
